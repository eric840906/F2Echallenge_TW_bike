{"version":3,"sources":["api/transport.js","hooks/useMyToast.js","hooks/useSpots.js","hooks/useAvailability.js","hooks/usePosition.js","hooks/useShape.js","assets/images/marker2.svg","assets/images/flag.svg","assets/images/crosshair.svg","Components/Map/Map.js","util/pathFilter.js","Components/Navbar/Navbar.js","util/combineData.js","Pages/BikePage.js"],"names":["getAuthorizationHeader","GMTString","Date","toGMTString","ShaObj","jsSHA","setHMACKey","process","update","Authorization","getHMAC","bike","axios","create","headers","baseURL","cyclingRoute","useMyToast","id","toast","useToast","successToast","successText","isActive","title","position","status","duration","isClosable","warningToast","warningText","infoToast","infoText","errorToast","errorText","useStation","useState","spots","setSpots","search","a","option","city","lat","lng","finalUrl","get","data","useAvailability","console","log","usePosition","setLat","setLng","error","setError","onChange","coords","latitude","longitude","onError","message","useEffect","geo","navigator","geolocation","watcher","watchPosition","clearWatch","useShape","skip","skipString","containerStyle","width","height","MyMap","nearbySpots","routePath","currentMap","setCurrentMap","currentInfo","setCurrentInfo","isLoaded","useJsApiLoader","googleMapsApiKey","currentPath","setCurrentPath","Geometry","replace","trim","split","reduce","acc","cur","curArr","panTo","flex","w","overflow","mapContainerStyle","zoom","onLoad","e","setCenter","length","map","spot","StationPosition","PositionLat","PositionLon","onClick","options","icon","url","markerIcon","StationID","onCloseClick","flexDirection","bg","borderRadius","boxShadow","p","maxW","gridGap","fontWeight","StationName","Zh_tw","AvailableRentBikes","AvailableReturnBikes","polyline","path","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","clickable","draggable","editable","visible","radius","zIndex","corsshairIcon","flagIcon","memo","Navbar","onHamburgerClick","children","routeName","navigate","useNavigate","top","alignItems","py","px","color","minH","alignSelf","cursor","display","base","md","size","m","variant","marginLeft","h","onFocus","document","activeElement","blur","combineData","arr1","arr2","target","combine","concat","x","Object","assign","keys","k","BikePage","useSpots","nearbyStations","searchNearbyStations","stationDetail","searchStationDetail"],"mappings":"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","file":"static/js/4.ea3de03d.chunk.js","sourcesContent":["import axios from 'axios'\nimport jsSHA from 'jssha'\nconst getAuthorizationHeader = () => {\n  const AppID = process.env.REACT_APP_APPID\n  const AppKey = process.env.REACT_APP_APPKEY\n  const GMTString = new Date().toGMTString()\n  const ShaObj = new jsSHA('SHA-1', 'TEXT')\n  ShaObj.setHMACKey(AppKey, 'TEXT')\n  ShaObj.update('x-date: ' + GMTString)\n  const HMAC = ShaObj.getHMAC('B64')\n  const Authorization =\n    'hmac username=\"' +\n    AppID +\n    '\", algorithm=\"hmac-sha1\", headers=\"x-date\", signature=\"' +\n    HMAC +\n    '\"'\n  return { Authorization: Authorization, 'X-Date': GMTString }\n}\nexport const bike = axios.create({\n  headers: getAuthorizationHeader(),\n  baseURL: 'https://ptx.transportdata.tw/MOTC/v2/Bike/'\n})\nexport const cyclingRoute = axios.create({\n  headers: getAuthorizationHeader(),\n  baseURL: 'https://ptx.transportdata.tw/MOTC/v2/Cycling/Shape'\n})\n\n// export const getSpots = async (city = '') => {\n//   try {\n//     const res = await travelInfo.get(`ScenicSpot/${city}?$top=30&$format=JSON`)\n//     console.log(res)\n//   } catch (error) {\n//     console.log(error)\n//   }\n// }\n","import { useToast } from '@chakra-ui/toast'\n\nconst useMyToast = (id) => {\n  const toast = useToast()\n  const warningToast = (warningText) => {\n    if (!toast.isActive(id)) {\n      return toast({\n        id,\n        title: warningText,\n        position: 'bottom',\n        status: 'warning',\n        duration: 3000,\n        isClosable: true\n      })\n    }\n  }\n  const errorToast = (errorText) => {\n    if (!toast.isActive(id)) {\n      return toast({\n        id,\n        title: errorText,\n        position: 'bottom',\n        status: 'error',\n        duration: 3000,\n        isClosable: true\n      })\n    }\n  }\n  const successToast = (successText) => {\n    if (!toast.isActive(id)) {\n      return toast({\n        id,\n        title: successText,\n        position: 'bottom',\n        status: 'success',\n        duration: 3000,\n        isClosable: true\n      })\n    }\n  }\n  const infoToast = (infoText) => {\n    if (!toast.isActive(id)) {\n      return toast({\n        id,\n        title: infoText,\n        position: 'bottom',\n        status: 'error',\n        duration: 3000,\n        isClosable: true\n      })\n    }\n  }\n  return { successToast, warningToast, infoToast, errorToast }\n}\n\nexport default useMyToast\n","import { useState } from 'react'\nimport { bike } from 'api/transport'\nimport useMyToast from './useMyToast'\n\nconst useStation = () => {\n  const [spots, setSpots] = useState([])\n  const { errorToast } = useMyToast('error')\n  // useEffect(() => {\n  //   search({ option, city, lat, lng })\n  // }, [])\n  const search = async ({ option, city, lat, lng }) => {\n    let finalUrl\n    if (option === 'nearby') {\n      finalUrl = `Station/NearBy?$top=30&$spatialFilter=nearby(${lat}, ${lng}, 1000)&$format=JSON`\n    } else {\n      finalUrl = `Station/${city}?$top=30&$format=JSON`\n    }\n    try {\n      const { data } = await bike.get(finalUrl)\n      setSpots(data)\n    } catch (error) {\n      errorToast('權限到期，請重新整理後再試一次')\n    }\n  }\n  return [spots, search]\n}\n\nexport default useStation\n","import { useState } from 'react'\nimport { bike } from 'api/transport'\n\nconst useAvailability = () => {\n  const [spots, setSpots] = useState([])\n  const search = async ({ option, city, lat, lng }) => {\n    let finalUrl\n    if (option === 'nearby') {\n      finalUrl = `Availability/NearBy?$top=30&$spatialFilter=nearby(${lat}, ${lng}, 1000)&$format=JSON`\n    } else {\n      finalUrl = `Availability/${city}?$top=30&$format=JSON`\n    }\n    try {\n      const { data } = await bike.get(finalUrl)\n      setSpots(data)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  return [spots, search]\n}\n\nexport default useAvailability\n","import { useEffect, useState } from 'react'\nconst usePosition = () => {\n  const [lat, setLat] = useState(null)\n  const [lng, setLng] = useState(null)\n  const [error, setError] = useState(null)\n  const onChange = ({ coords }) => {\n    setLat(coords.latitude)\n    setLng(coords.longitude)\n  }\n  const onError = error => {\n    setError(error.message)\n  }\n  useEffect(() => {\n    const geo = navigator.geolocation\n    const watcher = geo.watchPosition(onChange, onError)\n    if (!geo) {\n      setError('Geolocation is not supported')\n      return\n    }\n    return () => geo.clearWatch(watcher)\n  }, [])\n\n  return [lat, lng, error]\n}\n\nexport default usePosition\n","import { useState } from 'react'\nimport { cyclingRoute } from 'api/transport'\nimport useMyToast from './useMyToast'\n\nconst useShape = () => {\n  const [spots, setSpots] = useState([])\n  const { errorToast } = useMyToast('error')\n  const search = async ({ city, skip }) => {\n    const skipString = skip ? `$skip=${skip}` : ''\n    const tail = '$top=30&$format=JSON'\n    const finalUrl = `${city}?${skipString}&${tail}`\n    try {\n      const { data } = await cyclingRoute.get(finalUrl)\n      setSpots(data)\n    } catch (error) {\n      errorToast('權限到期，請重新整理後再試一次')\n    }\n  }\n  return [spots, search]\n}\n\nexport default useShape\n","export default __webpack_public_path__ + \"static/media/marker2.509bc30b.svg\";","export default __webpack_public_path__ + \"static/media/flag.a2df00b5.svg\";","export default __webpack_public_path__ + \"static/media/crosshair.a8fe395c.svg\";","import { Flex, Text } from '@chakra-ui/react'\nimport { memo, useState, useEffect } from 'react'\nimport markerIcon from 'assets/images/marker2.svg'\nimport flagIcon from 'assets/images/flag.svg'\nimport corsshairIcon from 'assets/images/crosshair.svg'\n\nimport {\n  GoogleMap,\n  useJsApiLoader,\n  Marker,\n  InfoBox,\n  Polyline\n} from '@react-google-maps/api'\nimport PropTypes from 'prop-types'\nimport { pathFilter } from 'util/pathFilter'\n\nconst containerStyle = {\n  width: '100%',\n  height: '100%'\n}\n\nconst MyMap = ({ lat, lng, nearbySpots, routePath }) => {\n  const [currentMap, setCurrentMap] = useState(null)\n  const [currentInfo, setCurrentInfo] = useState(null)\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY\n  })\n  const [currentPath, setCurrentPath] = useState(null)\n  useEffect(() => {\n    if (routePath) {\n      setCurrentPath(pathFilter(routePath.Geometry))\n      // console.log(currentPath)\n    }\n  }, [routePath])\n  useEffect(() => {\n    if (currentPath) {\n      currentMap.panTo(currentPath[0])\n    }\n  }, [currentPath])\n\n  const renderStations = spots => {\n    return (\n      spots.length > 0 &&\n      spots.map(spot => (\n        <div key={spot.StationID}>\n          <Marker\n            position={{\n              lat: spot.StationPosition.PositionLat,\n              lng: spot.StationPosition.PositionLon\n            }}\n            onClick={() => {\n              setCurrentInfo(spot)\n            }}\n            options={{\n              icon: {\n                url: markerIcon\n              }\n            }}\n          />\n        </div>\n      ))\n    )\n  }\n  const onLoad = polyline => {\n    console.log('polyline: ', polyline)\n  }\n\n  const options = {\n    strokeColor: '#000000',\n    strokeOpacity: 0.6,\n    strokeWeight: 5,\n    fillColor: '#000000',\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: 30000,\n    zIndex: 1\n  }\n  return isLoaded && lat ? (\n    <Flex flex={1} w='100%' overflow='hidden'>\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        zoom={15}\n        onLoad={e => {\n          setCurrentMap(e)\n          e.setCenter({ lat, lng })\n        }}\n      >\n        {/* <Marker position={{ lat, lng }} /> */}\n        {nearbySpots.length > 0 && renderStations(nearbySpots)}\n        {currentInfo && (\n          <InfoBox\n            position={{\n              lat: currentInfo.StationPosition.PositionLat,\n              lng: currentInfo.StationPosition.PositionLon\n            }}\n            onCloseClick={e => {\n              setCurrentInfo(null)\n            }}\n            onLoad={() => console.log(123)}\n          >\n            <Flex\n              flexDirection='column'\n              bg='brand.white'\n              borderRadius='6px'\n              boxShadow='xl'\n              p={3}\n              maxW='300px'\n              gridGap={1}\n            >\n              <Text fontWeight='700'>{currentInfo.StationName.Zh_tw}</Text>\n              <Text>剩餘車輛: {currentInfo.AvailableRentBikes}</Text>\n              <Text>目前空位: {currentInfo.AvailableReturnBikes}</Text>\n            </Flex>\n          </InfoBox>\n        )}\n        <Polyline onLoad={onLoad} path={currentPath} options={options} />\n        {currentPath && (\n          <>\n            <Marker\n              position={{\n                lat: currentPath[0].lat,\n                lng: currentPath[0].lng\n              }}\n              options={{\n                icon: {\n                  url: corsshairIcon\n                }\n              }}\n            />\n            <Marker\n              position={{\n                lat: currentPath[currentPath.length - 1].lat,\n                lng: currentPath[currentPath.length - 1].lng\n              }}\n              options={{\n                icon: {\n                  url: flagIcon\n                }\n              }}\n            />\n          </>\n        )}\n      </GoogleMap>\n    </Flex>\n  ) : (\n    <></>\n  )\n}\n\nMyMap.propTypes = {\n  lat: PropTypes.number,\n  lng: PropTypes.number,\n  nearbySpots: PropTypes.array,\n  routePath: PropTypes.object\n}\n\nexport default memo(MyMap)\n","export const pathFilter = pathStr => {\n  const filterResult = pathStr.replace(/[A-Z'()']{1}/gm, '').trim()\n  const finalResult = filterResult.split(',').reduce((acc, cur) => {\n    const curArr = cur.split(' ')\n    return [...acc, { lat: curArr[1] * 1, lng: curArr[0] * 1 }]\n  }, [])\n  return finalResult\n}\n","// import { useRef, useEffect } from 'react'\nimport { Flex, Button, Heading } from '@chakra-ui/react'\n// import { HamburgerIcon } from '@chakra-ui/icons'\nimport { useNavigate } from 'react-router'\nimport { HamburgerIcon } from '@chakra-ui/icons'\nimport { Logo } from 'assets/logo/logo'\nimport Proptype from 'prop-types'\n\nconst Navbar = ({ onHamburgerClick, children, routeName }) => {\n  const navigate = useNavigate()\n  return (\n    <Flex\n      position='sticky'\n      zIndex='sticky'\n      top='0'\n      bg='brand.yellow'\n      boxShadow='sm'\n      w='100%'\n      alignItems='center'\n      py={5}\n      px={10}\n      color='white'\n      gridGap='5rem'\n      minH='80px'\n    >\n      <Flex\n        alignSelf='center'\n        cursor='pointer'\n        onClick={() => navigate('/')}\n        display={{ base: 'none', md: 'block' }}\n      >\n        <Logo />\n      </Flex>\n\n      {routeName && (\n        <Heading size='sm' color='black' m='auto'>\n          {routeName}\n        </Heading>\n      )}\n      {children}\n      {/* <Button\n        variant='default'\n        marginLeft='auto'\n        boxShadow='none'\n        w='40px'\n        h='40px'\n        onClick={onHamburgerClick}\n        onFocus={() => document.activeElement.blur()}\n        size='sm'\n      >\n        <HamburgerIcon w={5} h={5} />\n      </Button> */}\n      <Button\n        variant='default'\n        marginLeft='auto'\n        boxShadow='none'\n        w='40px'\n        h='40px'\n        onClick={onHamburgerClick}\n        onFocus={() => document.activeElement.blur()}\n        size='sm'\n      >\n        <HamburgerIcon w={5} h={5} />\n      </Button>\n    </Flex>\n  )\n}\n\nNavbar.propTypes = {\n  onHamburgerClick: Proptype.func,\n  children: Proptype.node,\n  routeName: Proptype.string\n}\n\nexport default Navbar\n","const combineData = (arr1, arr2, target) => {\n  const combine = arr1.concat(arr2).reduce((acc, x) => {\n    acc[x[target]] = Object.assign(acc[x[target]] || {}, x)\n    return acc\n  }, {})\n  const result = Object.keys(combine).map(k => combine[k])\n  return result\n}\n\nexport default combineData\n","import { useEffect } from 'react'\nimport { Flex, Text } from '@chakra-ui/react'\nimport { MyMap } from 'Components/Map'\nimport { usePosition, useSpots, useAvailability } from 'hooks'\nimport combineData from 'util/combineData'\nimport { Navbar } from 'Components/Navbar'\n\nconst BikePage = () => {\n  const [latitude, longitude, error] = usePosition()\n  const [nearbyStations, searchNearbyStations] = useSpots()\n  const [stationDetail, searchStationDetail] = useAvailability()\n  useEffect(() => {\n    if (latitude && longitude) {\n      searchNearbyStations({\n        option: 'nearby',\n        lat: latitude,\n        lng: longitude\n      })\n      searchStationDetail({\n        option: 'nearby',\n        lat: latitude,\n        lng: longitude\n      })\n    }\n  }, [latitude, longitude])\n  return (\n    <>\n      <Flex flexDirection='column' h='100vh'>\n        <Navbar />\n        {error ? (\n          <Text>{error}</Text>\n        ) : (\n          latitude && (\n            <MyMap\n              lat={latitude}\n              lng={longitude}\n              nearbySpots={combineData(\n                nearbyStations,\n                stationDetail,\n                'StationID'\n              )}\n            />\n          )\n        )}\n      </Flex>\n    </>\n  )\n}\n\nexport default BikePage\n"],"sourceRoot":""}