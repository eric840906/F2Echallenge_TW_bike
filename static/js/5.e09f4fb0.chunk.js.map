{"version":3,"sources":["assets/style/style.js","api/transport.js","hooks/useMyToast.js","hooks/useSpots.js","hooks/useAvailability.js","hooks/usePosition.js","hooks/useShape.js","assets/images/marker2.svg","assets/images/flag.svg","assets/images/crosshair.svg","Components/Map/Map.js","util/pathFilter.js","Components/Navbar/Navbar.js","data/cityData.js","Components/Cards/SpotCard.js","Pages/CityPage.js"],"names":["textOverflow","whiteSpace","overflow","maxW","getAuthorizationHeader","GMTString","Date","toGMTString","ShaObj","jsSHA","setHMACKey","process","update","Authorization","getHMAC","bike","axios","create","headers","baseURL","cyclingRoute","useMyToast","id","toast","useToast","successToast","successText","isActive","title","position","status","duration","isClosable","warningToast","warningText","infoToast","infoText","errorToast","errorText","useStation","useState","spots","setSpots","search","a","option","city","lat","lng","finalUrl","get","data","useAvailability","console","log","usePosition","setLat","setLng","error","setError","onChange","coords","latitude","longitude","onError","message","useEffect","geo","navigator","geolocation","watcher","watchPosition","clearWatch","useShape","skip","skipString","containerStyle","width","height","MyMap","nearbySpots","routePath","currentMap","setCurrentMap","currentInfo","setCurrentInfo","isLoaded","useJsApiLoader","googleMapsApiKey","currentPath","setCurrentPath","Geometry","replace","trim","split","reduce","acc","cur","curArr","panTo","flex","w","mapContainerStyle","zoom","onLoad","e","setCenter","options","gestureHandling","length","map","spot","StationPosition","PositionLat","PositionLon","onClick","icon","url","markerIcon","StationID","onCloseClick","flexDirection","bg","borderRadius","boxShadow","p","gridGap","fontWeight","StationName","Zh_tw","AvailableRentBikes","AvailableReturnBikes","polyline","path","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","clickable","draggable","editable","visible","radius","zIndex","corsshairIcon","flagIcon","memo","Navbar","onHamburgerClick","children","routeName","navigate","useNavigate","top","alignItems","py","px","color","minH","alignSelf","cursor","display","base","md","size","m","variant","marginLeft","h","onFocus","document","activeElement","blur","cityMap","Map","SpotCard","enter","setEnter","ratio","justifyContent","marginBottom","transition","onMouseEnter","onMouseLeave","textAlign","sm","RouteName","fontSize","Direction","CyclingLength","toFixed","as","FaMapMarkerAlt","City","Town","CityPage","useDisclosure","isOpen","onOpen","onClose","searchTerm","setSearchTerm","routes","searchRoutes","currentRoutes","setCurrentRoutes","setSkip","selectedRoute","setSelectedRoute","loadMore","setLoadMore","onDrawerOpen","onDrawerClose","currentTarget","value","style","backgroundColor","overflowY","templateColumns","disabled"],"mappings":"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","file":"static/js/5.e09f4fb0.chunk.js","sourcesContent":["export const textOverflow = {\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n  maxW: '100px'\n}\n","import axios from 'axios'\nimport jsSHA from 'jssha'\nconst getAuthorizationHeader = () => {\n  const AppID = process.env.REACT_APP_APPID\n  const AppKey = process.env.REACT_APP_APPKEY\n  const GMTString = new Date().toGMTString()\n  const ShaObj = new jsSHA('SHA-1', 'TEXT')\n  ShaObj.setHMACKey(AppKey, 'TEXT')\n  ShaObj.update('x-date: ' + GMTString)\n  const HMAC = ShaObj.getHMAC('B64')\n  const Authorization =\n    'hmac username=\"' +\n    AppID +\n    '\", algorithm=\"hmac-sha1\", headers=\"x-date\", signature=\"' +\n    HMAC +\n    '\"'\n  return { Authorization: Authorization, 'X-Date': GMTString }\n}\nexport const bike = axios.create({\n  headers: getAuthorizationHeader(),\n  baseURL: 'https://ptx.transportdata.tw/MOTC/v2/Bike/'\n})\nexport const cyclingRoute = axios.create({\n  headers: getAuthorizationHeader(),\n  baseURL: 'https://ptx.transportdata.tw/MOTC/v2/Cycling/Shape'\n})\n\n// export const getSpots = async (city = '') => {\n//   try {\n//     const res = await travelInfo.get(`ScenicSpot/${city}?$top=30&$format=JSON`)\n//     console.log(res)\n//   } catch (error) {\n//     console.log(error)\n//   }\n// }\n","import { useToast } from '@chakra-ui/toast'\n\nconst useMyToast = (id) => {\n  const toast = useToast()\n  const warningToast = (warningText) => {\n    if (!toast.isActive(id)) {\n      return toast({\n        id,\n        title: warningText,\n        position: 'bottom',\n        status: 'warning',\n        duration: 3000,\n        isClosable: true\n      })\n    }\n  }\n  const errorToast = (errorText) => {\n    if (!toast.isActive(id)) {\n      return toast({\n        id,\n        title: errorText,\n        position: 'bottom',\n        status: 'error',\n        duration: 3000,\n        isClosable: true\n      })\n    }\n  }\n  const successToast = (successText) => {\n    if (!toast.isActive(id)) {\n      return toast({\n        id,\n        title: successText,\n        position: 'bottom',\n        status: 'success',\n        duration: 3000,\n        isClosable: true\n      })\n    }\n  }\n  const infoToast = (infoText) => {\n    if (!toast.isActive(id)) {\n      return toast({\n        id,\n        title: infoText,\n        position: 'bottom',\n        status: 'error',\n        duration: 3000,\n        isClosable: true\n      })\n    }\n  }\n  return { successToast, warningToast, infoToast, errorToast }\n}\n\nexport default useMyToast\n","import { useState } from 'react'\nimport { bike } from 'api/transport'\nimport useMyToast from './useMyToast'\n\nconst useStation = () => {\n  const [spots, setSpots] = useState([])\n  const { errorToast } = useMyToast('error')\n  // useEffect(() => {\n  //   search({ option, city, lat, lng })\n  // }, [])\n  const search = async ({ option, city, lat, lng }) => {\n    let finalUrl\n    if (option === 'nearby') {\n      finalUrl = `Station/NearBy?$top=30&$spatialFilter=nearby(${lat}, ${lng}, 1000)&$format=JSON`\n    } else {\n      finalUrl = `Station/${city}?$top=30&$format=JSON`\n    }\n    try {\n      const { data } = await bike.get(finalUrl)\n      setSpots(data)\n    } catch (error) {\n      errorToast('權限到期，請重新整理後再試一次')\n    }\n  }\n  return [spots, search]\n}\n\nexport default useStation\n","import { useState } from 'react'\nimport { bike } from 'api/transport'\n\nconst useAvailability = () => {\n  const [spots, setSpots] = useState([])\n  const search = async ({ option, city, lat, lng }) => {\n    let finalUrl\n    if (option === 'nearby') {\n      finalUrl = `Availability/NearBy?$top=30&$spatialFilter=nearby(${lat}, ${lng}, 1000)&$format=JSON`\n    } else {\n      finalUrl = `Availability/${city}?$top=30&$format=JSON`\n    }\n    try {\n      const { data } = await bike.get(finalUrl)\n      setSpots(data)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  return [spots, search]\n}\n\nexport default useAvailability\n","import { useEffect, useState } from 'react'\nconst usePosition = () => {\n  const [lat, setLat] = useState(null)\n  const [lng, setLng] = useState(null)\n  const [error, setError] = useState(null)\n  const onChange = ({ coords }) => {\n    setLat(coords.latitude)\n    setLng(coords.longitude)\n  }\n  const onError = error => {\n    setError(error.message)\n  }\n  useEffect(() => {\n    const geo = navigator.geolocation\n    const watcher = geo.watchPosition(onChange, onError)\n    if (!geo) {\n      setError('Geolocation is not supported')\n      return\n    }\n    return () => geo.clearWatch(watcher)\n  }, [])\n\n  return [lat, lng, error]\n}\n\nexport default usePosition\n","import { useState } from 'react'\nimport { cyclingRoute } from 'api/transport'\nimport useMyToast from './useMyToast'\n\nconst useShape = () => {\n  const [spots, setSpots] = useState([])\n  const { errorToast } = useMyToast('error')\n  const search = async ({ city, skip }) => {\n    const skipString = skip ? `$skip=${skip}` : ''\n    const tail = '$top=30&$format=JSON'\n    const finalUrl = `${city}?${skipString}&${tail}`\n    try {\n      const { data } = await cyclingRoute.get(finalUrl)\n      setSpots(data)\n    } catch (error) {\n      errorToast('權限到期，請重新整理後再試一次')\n    }\n  }\n  return [spots, search]\n}\n\nexport default useShape\n","export default __webpack_public_path__ + \"static/media/marker2.509bc30b.svg\";","export default __webpack_public_path__ + \"static/media/flag.a2df00b5.svg\";","export default __webpack_public_path__ + \"static/media/crosshair.a8fe395c.svg\";","import { Flex, Text } from '@chakra-ui/react'\nimport { memo, useState, useEffect } from 'react'\nimport markerIcon from 'assets/images/marker2.svg'\nimport flagIcon from 'assets/images/flag.svg'\nimport corsshairIcon from 'assets/images/crosshair.svg'\n\nimport {\n  GoogleMap,\n  useJsApiLoader,\n  Marker,\n  InfoBox,\n  Polyline\n} from '@react-google-maps/api'\nimport PropTypes from 'prop-types'\nimport { pathFilter } from 'util/pathFilter'\n\nconst containerStyle = {\n  width: '100%',\n  height: '100%'\n}\n\nconst MyMap = ({ lat, lng, nearbySpots, routePath }) => {\n  const [currentMap, setCurrentMap] = useState(null)\n  const [currentInfo, setCurrentInfo] = useState(null)\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY\n  })\n  const [currentPath, setCurrentPath] = useState(null)\n  useEffect(() => {\n    if (routePath) {\n      setCurrentPath(pathFilter(routePath.Geometry))\n      // console.log(currentPath)\n    }\n  }, [routePath])\n  useEffect(() => {\n    if (currentPath) {\n      currentMap.panTo(currentPath[0])\n    }\n  }, [currentPath])\n\n  const renderStations = spots => {\n    return (\n      spots.length > 0 &&\n      spots.map(spot => (\n        <div key={spot.StationID}>\n          <Marker\n            position={{\n              lat: spot.StationPosition.PositionLat,\n              lng: spot.StationPosition.PositionLon\n            }}\n            onClick={() => {\n              setCurrentInfo(spot)\n            }}\n            options={{\n              icon: {\n                url: markerIcon\n              }\n            }}\n          />\n        </div>\n      ))\n    )\n  }\n  const onLoad = polyline => {\n    console.log('polyline: ', polyline)\n  }\n\n  const options = {\n    strokeColor: '#000000',\n    strokeOpacity: 0.6,\n    strokeWeight: 5,\n    fillColor: '#000000',\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: 30000,\n    zIndex: 1\n  }\n  return isLoaded && lat ? (\n    <Flex flex={1} w='100%' overflow='hidden'>\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        zoom={15}\n        onLoad={e => {\n          setCurrentMap(e)\n          e.setCenter({ lat, lng })\n        }}\n        options={{\n          gestureHandling: 'greedy'\n        }}\n      >\n        {/* <Marker position={{ lat, lng }} /> */}\n        {nearbySpots.length > 0 && renderStations(nearbySpots)}\n        {currentInfo && (\n          <InfoBox\n            position={{\n              lat: currentInfo.StationPosition.PositionLat,\n              lng: currentInfo.StationPosition.PositionLon\n            }}\n            onCloseClick={e => {\n              setCurrentInfo(null)\n            }}\n            onLoad={() => console.log(123)}\n          >\n            <Flex\n              flexDirection='column'\n              bg='brand.white'\n              borderRadius='6px'\n              boxShadow='xl'\n              p={3}\n              maxW='300px'\n              gridGap={1}\n            >\n              <Text fontWeight='700'>{currentInfo.StationName.Zh_tw}</Text>\n              <Text>剩餘車輛: {currentInfo.AvailableRentBikes}</Text>\n              <Text>目前空位: {currentInfo.AvailableReturnBikes}</Text>\n            </Flex>\n          </InfoBox>\n        )}\n        <Polyline onLoad={onLoad} path={currentPath} options={options} />\n        {currentPath && (\n          <>\n            <Marker\n              position={{\n                lat: currentPath[0].lat,\n                lng: currentPath[0].lng\n              }}\n              options={{\n                icon: {\n                  url: corsshairIcon\n                }\n              }}\n            />\n            <Marker\n              position={{\n                lat: currentPath[currentPath.length - 1].lat,\n                lng: currentPath[currentPath.length - 1].lng\n              }}\n              options={{\n                icon: {\n                  url: flagIcon\n                }\n              }}\n            />\n          </>\n        )}\n      </GoogleMap>\n    </Flex>\n  ) : (\n    <></>\n  )\n}\n\nMyMap.propTypes = {\n  lat: PropTypes.number,\n  lng: PropTypes.number,\n  nearbySpots: PropTypes.array,\n  routePath: PropTypes.object\n}\n\nexport default memo(MyMap)\n","export const pathFilter = pathStr => {\n  const filterResult = pathStr.replace(/[A-Z'()']{1}/gm, '').trim()\n  const finalResult = filterResult.split(',').reduce((acc, cur) => {\n    const curArr = cur.split(' ')\n    return [...acc, { lat: curArr[1] * 1, lng: curArr[0] * 1 }]\n  }, [])\n  return finalResult\n}\n","// import { useRef, useEffect } from 'react'\nimport { Flex, Button, Heading } from '@chakra-ui/react'\n// import { HamburgerIcon } from '@chakra-ui/icons'\nimport { useNavigate } from 'react-router'\nimport { HamburgerIcon } from '@chakra-ui/icons'\nimport { Logo } from 'assets/logo/logo'\nimport Proptype from 'prop-types'\nimport { textOverflow } from 'assets/style/style'\n\nconst Navbar = ({ onHamburgerClick, children, routeName }) => {\n  const navigate = useNavigate()\n  return (\n    <Flex\n      position='sticky'\n      zIndex='sticky'\n      top='0'\n      bg='brand.yellow'\n      boxShadow='sm'\n      w='100%'\n      alignItems='center'\n      py={5}\n      px={10}\n      color='white'\n      gridGap='5rem'\n      minH='80px'\n    >\n      <Flex\n        alignSelf='center'\n        cursor='pointer'\n        onClick={() => navigate('/')}\n        display={{ base: 'none', md: 'block' }}\n      >\n        <Logo />\n      </Flex>\n\n      {routeName && (\n        <Heading\n          {...textOverflow}\n          maxW={{ base: '250px', md: '500px' }}\n          size='sm'\n          color='black'\n          m='auto'\n        >\n          {routeName}\n        </Heading>\n      )}\n      {children}\n      {/* <Button\n        variant='default'\n        marginLeft='auto'\n        boxShadow='none'\n        w='40px'\n        h='40px'\n        onClick={onHamburgerClick}\n        onFocus={() => document.activeElement.blur()}\n        size='sm'\n      >\n        <HamburgerIcon w={5} h={5} />\n      </Button> */}\n      <Button\n        variant='default'\n        marginLeft='auto'\n        boxShadow='none'\n        w='40px'\n        h='40px'\n        onClick={onHamburgerClick}\n        onFocus={() => document.activeElement.blur()}\n        size='sm'\n      >\n        <HamburgerIcon w={5} h={5} />\n      </Button>\n    </Flex>\n  )\n}\n\nNavbar.propTypes = {\n  onHamburgerClick: Proptype.func,\n  children: Proptype.node,\n  routeName: Proptype.string\n}\n\nexport default Navbar\n","// \"City: '台北市' is not accepted but Taipei, NewTaipei, Taoyuan, Taichung, Tainan, Kaohsiung, Keelung, Hsinchu, HsinchuCounty, MiaoliCounty, ChanghuaCounty, NantouCounty, YunlinCounty, ChiayiCounty, Chiayi, PingtungCounty, YilanCounty, HualienCounty, TaitungCounty, KinmenCounty, PenghuCounty, LienchiangCounty\"\nexport const cityMap = new Map([\n  ['請選擇城市', ''],\n  ['台北市', 'Taipei'],\n  ['新北市', 'NewTaipei'],\n  ['桃園市', 'Taoyuan'],\n  ['台中市', 'Taichung'],\n  ['台南市', 'Tainan'],\n  ['高雄市', 'Kaohsiung'],\n  ['基隆市', 'Keelung'],\n  ['新竹縣', 'HsinchuCounty'],\n  ['彰化縣', 'ChanghuaCounty'],\n  ['南投縣', 'NantouCounty'],\n  ['雲林縣', 'YunlinCounty'],\n  ['嘉義縣', 'ChiayiCounty'],\n  ['嘉義市', 'Chiayi'],\n  ['屏東縣', 'PingtungCounty'],\n  ['宜蘭縣', 'YilanCounty'],\n  ['花蓮縣', 'HualienCounty'],\n  ['台東縣', 'TaitungCounty'],\n  ['金門縣', 'KinmenCounty'],\n  ['澎湖縣', 'PenghuCounty'],\n  ['苗栗縣', 'MiaoliCounty']\n])\n","import { useState } from 'react'\nimport { Heading, Flex, AspectRatio, Icon, Text } from '@chakra-ui/react'\nimport { FaMapMarkerAlt } from 'react-icons/fa'\nimport PropTypes from 'prop-types'\nimport { textOverflow } from 'assets/style/style'\nconst SpotCard = ({ spot, onClick }) => {\n  const [enter, setEnter] = useState()\n  return (\n    <AspectRatio key={spot.RouteName} ratio={5 / 2}>\n      <Flex\n        cursor='pointer'\n        borderRadius='10px'\n        overflow='hidden'\n        flexDirection='column'\n        justifyContent='space-between !important'\n        boxShadow='lg'\n        marginBottom='40px'\n        bg={enter ? 'brand.black' : 'white'}\n        color={enter ? 'brand.yellow' : 'brand.black'}\n        transition='all 0.5s ease'\n        p={2}\n        onClick={onClick}\n        onMouseEnter={() => setEnter(true)}\n        onMouseLeave={() => setEnter(false)}\n      >\n        <Heading\n          w='100%'\n          {...textOverflow}\n          maxW='100%'\n          color='brand.grey'\n          textAlign='start'\n          size={{ base: 'sm', sm: 'md' }}\n        >\n          {spot.RouteName}\n        </Heading>\n        <Flex justifyContent='space-between' w='100%' fontSize='12px'>\n          <Flex>\n            <Text>{spot.Direction}</Text>\n            <Text>{(spot.CyclingLength / 1000).toFixed(2)}公里</Text>\n          </Flex>\n          <Flex>\n            <Icon as={FaMapMarkerAlt} alignSelf='center' />\n            <Text {...textOverflow}>\n              {spot.City}&nbsp;{spot.Town}\n            </Text>\n          </Flex>\n        </Flex>\n      </Flex>\n    </AspectRatio>\n  )\n}\nSpotCard.propTypes = {\n  spot: PropTypes.object,\n  onClick: PropTypes.func\n}\n\nexport default SpotCard\n","import { Flex, Select, Grid, useDisclosure, Button } from '@chakra-ui/react'\nimport { cityMap } from 'data/cityData'\nimport { Navbar } from 'Components/Navbar'\nimport { useState, useEffect } from 'react'\nimport { useShape, usePosition } from 'hooks'\nimport { SpotCard } from 'Components/Cards'\nimport { SideDrawer } from 'Components/Drawer'\nimport { MyMap } from 'Components/Map'\n\nconst CityPage = () => {\n  const [latitude, longitude] = usePosition()\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [searchTerm, setSearchTerm] = useState('')\n  const [routes, searchRoutes] = useShape()\n  const [currentRoutes, setCurrentRoutes] = useState([])\n  const [skip, setSkip] = useState(0)\n  const [selectedRoute, setSelectedRoute] = useState(null)\n  const [loadMore, setLoadMore] = useState(true)\n  useEffect(() => {\n    if (searchTerm !== '') {\n      setSkip(0)\n      setCurrentRoutes([])\n      searchRoutes({ city: searchTerm, skip: 0 })\n    }\n  }, [searchTerm])\n\n  useEffect(() => {\n    setLoadMore(!(routes.length === 0))\n    setCurrentRoutes([...currentRoutes, ...routes])\n  }, [routes])\n\n  useEffect(() => {\n    if (searchTerm !== '') {\n      searchRoutes({ city: searchTerm, skip })\n    }\n  }, [skip])\n  useEffect(() => {\n    console.log(selectedRoute)\n  }, [selectedRoute])\n  const renderCard = spots => {\n    return spots.map(spot => (\n      <SpotCard\n        key={spot.RouteName}\n        spot={spot}\n        onClick={() => {\n          onClose()\n          setSelectedRoute(spot)\n        }}\n      />\n    ))\n  }\n\n  return (\n    <>\n      <SideDrawer onDrawerOpen={isOpen} onDrawerClose={onClose}>\n        <Select\n          bg='brand.black'\n          w='150px'\n          color='brand.white'\n          borderRadius='100px'\n          onChange={e => setSearchTerm(e.currentTarget.value)}\n          value={searchTerm}\n        >\n          {[...cityMap].map(city => (\n            <option\n              key={city[1]}\n              value={city[1]}\n              style={{ backgroundColor: 'black' }}\n            >\n              {city[0]}\n            </option>\n          ))}\n        </Select>\n        <Grid\n          p={5}\n          w='100%'\n          borderRadius='16px'\n          bg='brand.yellow'\n          h='70vh'\n          overflowY='scroll'\n          templateColumns={{\n            base: 'repeat(1, 1fr)'\n          }}\n          gridGap={5}\n        >\n          {currentRoutes.length > 0 ? (\n            renderCard(currentRoutes)\n          ) : (\n            <Flex py={5}>請選擇城市</Flex>\n          )}\n        </Grid>\n        <Button\n          variant='default'\n          disabled={!loadMore}\n          onClick={() => setSkip(skip + 30)}\n        >\n          {loadMore ? '載入更多' : '已到底部'}\n        </Button>\n      </SideDrawer>\n      <Flex flexDirection='column' h='100vh' alignItems='center'>\n        <Navbar\n          onHamburgerClick={onOpen}\n          routeName={(selectedRoute && selectedRoute.RouteName) || '請選擇車道'}\n        ></Navbar>\n        {latitude && (\n          <MyMap\n            lat={latitude}\n            lng={longitude}\n            nearbySpots={[]}\n            routePath={selectedRoute}\n          />\n        )}\n      </Flex>\n    </>\n  )\n}\n\nexport default CityPage\n"],"sourceRoot":""}